  Blatt-4
----Aufgabe 1------
#addi $8,$0,0
#addi $8,$8,1
#ori $8,$0,0xffff
#addi $9,$0,-16384
#add $8,$8,$9
addi $9,$0,-16384
addi $8,$0,0
addi $8,$8,1
addi $8,$0,0xffff
add $8,$8,$9

-----Aufgabe 2-------
#addi $8,$0,0
#addi $9,$0,11
#addi $10,$0,0x1000
#addi $11,$0,-1
#addi $12,$0,-0x8000
#addi $13,$0,0x8000
#addi $14,$0,0xffff0000
#addi $15,$0,0x7fffffff
#addi $24,$0,5322
#addi $25,$0,75



----#Aufgabe 3----
#addi $8,$0,0
#addi $9,$0,-11
#addi $10,$0,0x1000
#addi $12,$0,15
addi $11,$0,-1
#addi $12,$0,-0x8000
#addi $13,$0,0x8000
addi $14,$0,0xffff0000
#addi $15,$0,0x7fffffff
#addi $24,$0,5322
#addi $25,$0,75
#add $2,$10,$9 #r2=11+32768=32779
#sub $3,$10,$9 #r3=32768-11=32757
#nor $4,$9,$0 #not(1011 | 0000)=1100=-11 also not(11|0)=-12 (b-1)'s complement
#nor $9,$9,$0 #r9=not($9)=-12-->(b-1)'s complement
#addi $21,$0,1
#add $4,$9,$10 #r4=4096+(-12)=4084
#add $4,$9,$10 #r4=4084+1=4085
#2<<1<=>2*2^1,2<<2<=>2*2^2
#sll $5,$13 #shift word left logical
#addi $4,$0,-11
#sra $3,$4,2 # shift right logical
#sll $4,$13,5
#srl $16,$12,5
#sra $6,$13,5
#sra $7,$12,5
#srlv  $18,$13,$9
#div $18,$24,$25
#mflo $2
#mfhi $3
#addiu $20,$15,1 # if artithmetic overflow occurs addi dosnt work, bcz of trap, but addiu work at any issues
#addi $20,$15,1
clo $22,$11
clo $23,$14


  Aufgabe -4

      .data
   
   	 int: .byte 0xa0 #store 8 bits in data section
  	 short_int: .half 0xb1b0    #store half-word=16 bits in data section
   	 long_int: .word 0xc3c2c1c0  #store full word=32 bits in data section
   	 msg:.asciiz "Das Ende\n"    #store string with null terminator in data section
   
   
.text

  Blatt-5

  Aufgabe (a)

  .text

	  addi $4,$0,300  # r4 = 30
	  addi $5,$0,25  #r5 = 25
	  addi $2,$5,0   #r2 = r5
loop:     
          addi $2,$5,0   #r2 = r5
          beq $4,$0,end_of_loop #if r4=0=>result has been found
          beq $5,$0,result_found # if r4=0=>result has been found-
          slt $8,$4,$5           # if r4 is less then r5 then r8 = 1
          beq $8,$0,find_b_minus_a #if b>a then find b=b-a
          bne $8,$0,find_a_minus_b  #if a>b then find a=a-b
find_b_minus_a:
          sub $4,$4,$5 # r4=r4-r5
          j loop       # jump to loop again
find_a_minus_b:
          sub $5,$5,$4  #r5=r5-r5
          j loop   # jump to loop again
result_found:
         addi $2,$4,0  #save resutl in r2
end_of_loop:
         beq $0,$0,end_of_loop # result already found. programms ends
          
         

        Aufgabe (c+d)


        

.text
 main:
	addi $a0,$0,25
	addi $a1,$0,35
	jal ggT  #ggT(25,35)
	addi $a0,$0,210
	addi $a1,$0,28
	jal ggT #ggT(210,28)
	addi $a0,$0,49
	addi $a1,$0,42
	jal ggT #ggT(49,42)
	addi $a0,$0,17
	addi $a1,$0,3
	jal ggT #ggT(17,3)
end_of_programm:
        beq $0,$0,end_of_programm #end of the main programm
	
ggT:   #impementation of func ggT
      beq $a0,$0,return_to_caller  #if a0 =0 =>return to caller
      beq $a1,$0,save_result       #if a1=0 => save resutl in v0
      slt $3,$a0,$a1               #set r3 =1 if a0<a1
      beq $3,$1,decrease_b         #jump to deccrease_b if a0>a1
      bne $3,$1,decrease_a         #jump to deccrease_a if a0<a1
decrease_b:
      sub $a0,$a0,$a1  # set a0=a0-a1
      j ggT #jump to ggT again
decrease_a:
      sub $a1,$a1,$a0  #s set a1=a1-a0
      j ggT  # jump to ggT again
save_result:
     addi $v1,$a1,0
return_to_caller:
     addi $v0,$a1,0  #assign ggT in v0 
     jr $ra          #return to caller
      
      
---find ggT(a,b) using Divition Method

.text
        # c Programm
        
        #int ggT(int a,int b){
        #   if(b==0) return a;
        #  return ggT(b,a%b);
       #   }
    
        addi $12,$0,64 #r12 = 45
        addi $13,$0,16 #r13=16
 loop:
        div $12,$13    #divide r12 with r13 to find rest
        mfhi $3        #get the rest from hi
        addi $12,$13,0  #set r12=r13
        addi $13,$3,0    #set r13 to rest found from hi register
        beq $3,$0,loop_end  #Base Case. Return when r12%r13=0
        j loop  # jump to loop to continue the process
 loop_end: # infinity loop
     beq $0,$0, loop_end 
